# deployment/cloudbuild.yaml
steps:
  # ============================================================================
  # PREPARATION STEPS
  # ============================================================================

  # Step 1: Create Artifact Registry repository if it doesn't exist
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'create-artifact-repo'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Check if repository exists, create if not
        if ! gcloud artifacts repositories describe avestoai-repo --location=${_REGION} >/dev/null 2>&1; then
          echo "Creating Artifact Registry repository..."
          gcloud artifacts repositories create avestoai-repo \
            --repository-format=docker \
            --location=${_REGION} \
            --description="AvestoAI container images"
        else
          echo "Artifact Registry repository already exists"
        fi

  # Step 2: Configure Docker authentication
  - name: 'gcr.io/cloud-builders/docker'
    id: 'configure-docker-auth'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        gcloud auth configure-docker ${_REGION}-docker.pkg.dev

  # ============================================================================
  # BACKEND BUILD AND DEPLOY
  # ============================================================================

  # Step 3: Build backend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-backend'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/backend:${BUILD_ID}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/backend:latest'
      - '--build-arg'
      - 'ENVIRONMENT=${_ENVIRONMENT}'
      - './backend'
    waitFor: ['configure-docker-auth']

  # Step 4: Push backend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-backend'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/backend'
    waitFor: ['build-backend']

  # Step 5: Deploy backend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-backend'
    args:
      - 'run'
      - 'deploy'
      - 'avestoai-backend-${_ENVIRONMENT}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/backend:${BUILD_ID}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '${_BACKEND_MEMORY}'
      - '--cpu'
      - '${_BACKEND_CPU}'
      - '--max-instances'
      - '${_MAX_INSTANCES}'
      - '--min-instances'
      - '${_MIN_INSTANCES}'
      - '--concurrency'
      - '${_CONCURRENCY}'
      - '--timeout'
      - '${_TIMEOUT}'
      - '--service-account'
      - 'avestoai-backend@avestoai-466417.iam.gserviceaccount.com'
      - '--set-env-vars'
      - 'ENVIRONMENT=${_ENVIRONMENT},GOOGLE_CLOUD_PROJECT=$PROJECT_ID,VERTEX_AI_LOCATION=${_REGION},FI_MCP_BASE_URL=${_FI_MCP_BASE_URL},ENABLE_FI_MCP_INTEGRATION=true'
      - '--set-secrets'
      - 'JWT_SECRET_KEY=jwt-secret-key:latest'
      - '--port'
      - '8080'
      - '--tag'
      - '${_ENVIRONMENT}'
    waitFor: ['push-backend']

  # ============================================================================
  # FRONTEND BUILD AND DEPLOY
  # ============================================================================

  # Step 6: Build frontend Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-frontend'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/frontend:${BUILD_ID}'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/frontend:latest'
      - '--build-arg'
      - 'API_BASE_URL=${_API_BASE_URL}'
      - '--build-arg'
      - 'ENVIRONMENT=${_ENVIRONMENT}'
      - './frontend-chainlit'
    waitFor: ['configure-docker-auth']

  # Step 7: Push frontend image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-frontend'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/frontend'
    waitFor: ['build-frontend']

  # Step 8: Deploy frontend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deploy-frontend'
    args:
      - 'run'
      - 'deploy'
      - 'avestoai-frontend-${_ENVIRONMENT}'
      - '--image'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/frontend:${BUILD_ID}'
      - '--region'
      - '${_REGION}'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--memory'
      - '${_FRONTEND_MEMORY}'
      - '--cpu'
      - '${_FRONTEND_CPU}'
      - '--max-instances'
      - '${_FRONTEND_MAX_INSTANCES}'
      - '--min-instances'
      - '0'
      - '--concurrency'
      - '80'
      - '--timeout'
      - '300'
      - '--service-account'
      - 'avestoai-backend@avestoai-466417.iam.gserviceaccount.com'
      - '--set-env-vars'
      - 'API_BASE_URL=${_API_BASE_URL},ENVIRONMENT=${_ENVIRONMENT}'
      - '--port'
      - '8001'
      - '--tag'
      - '${_ENVIRONMENT}'
    waitFor: ['push-frontend', 'deploy-backend']

  # ============================================================================
  # POST-DEPLOYMENT STEPS
  # ============================================================================

  # Step 9: Health check backend
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check-backend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Waiting for backend to be ready..."
        sleep 30
        
        BACKEND_URL=$(gcloud run services describe avestoai-backend-${_ENVIRONMENT} --region=${_REGION} --format="value(status.url)")
        echo "Backend URL: $BACKEND_URL"
        
        # Health check with retries
        for i in {1..10}; do
          if curl -f "$BACKEND_URL/health"; then
            echo "‚úÖ Backend health check passed"
            break
          else
            echo "‚è≥ Backend not ready, retrying in 10 seconds... ($i/10)"
            sleep 10
          fi
        done
    waitFor: ['deploy-backend']

  # Step 10: Health check frontend
  - name: 'gcr.io/cloud-builders/curl'
    id: 'health-check-frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Waiting for frontend to be ready..."
        sleep 15
        
        FRONTEND_URL=$(gcloud run services describe avestoai-frontend-${_ENVIRONMENT} --region=${_REGION} --format="value(status.url)")
        echo "Frontend URL: $FRONTEND_URL"
        
        # Health check with retries
        for i in {1..5}; do
          if curl -f "$FRONTEND_URL" >/dev/null 2>&1; then
            echo "‚úÖ Frontend health check passed"
            break
          else
            echo "‚è≥ Frontend not ready, retrying in 10 seconds... ($i/5)"
            sleep 10
          fi
        done
    waitFor: ['deploy-frontend']

  # Step 11: Update traffic allocation (for production)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'update-traffic'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if [ "${_ENVIRONMENT}" = "production" ]; then
          echo "üöÄ Updating traffic allocation for production..."
          
          # Update backend traffic
          gcloud run services update-traffic avestoai-backend-${_ENVIRONMENT} \
            --to-revisions=LATEST=100 \
            --region=${_REGION}
          
          # Update frontend traffic
          gcloud run services update-traffic avestoai-frontend-${_ENVIRONMENT} \
            --to-revisions=LATEST=100 \
            --region=${_REGION}
        else
          echo "üìù Skipping traffic update for ${_ENVIRONMENT} environment"
        fi
    waitFor: ['health-check-backend', 'health-check-frontend']

  # Step 12: Display deployment information
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'deployment-info'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üéâ Deployment completed successfully!"
        echo "=========================================="
        
        # Get service URLs
        BACKEND_URL=$(gcloud run services describe avestoai-backend-${_ENVIRONMENT} --region=${_REGION} --format="value(status.url)")
        FRONTEND_URL=$(gcloud run services describe avestoai-frontend-${_ENVIRONMENT} --region=${_REGION} --format="value(status.url)")
        
        echo "üîß Backend API: $BACKEND_URL"
        echo "üí¨ Frontend UI: $FRONTEND_URL"
        echo "üìö API Docs: $BACKEND_URL/docs"
        echo "üè• Health Check: $BACKEND_URL/health"
        echo "üìä Metrics: $BACKEND_URL/metrics"
        echo ""
        echo "Environment: ${_ENVIRONMENT}"
        echo "Region: ${_REGION}"
        echo "Build ID: ${BUILD_ID}"
        echo "=========================================="
    waitFor: ['update-traffic']

# ============================================================================
# SUBSTITUTIONS (VARIABLES)
# ============================================================================
substitutions:
  # Environment settings
  _ENVIRONMENT: 'staging'  # Default to staging, override with --substitutions
  _REGION: 'us-central1'

  # Fi MCP Configuration
  _FI_MCP_BASE_URL: 'https://fi-mcp-dev-172306289913.asia-south1.run.app'

  # Backend configuration
  _BACKEND_MEMORY: '2Gi'
  _BACKEND_CPU: '2'
  _MAX_INSTANCES: '100'
  _MIN_INSTANCES: '1'
  _CONCURRENCY: '80'
  _TIMEOUT: '300'

  # Frontend configuration
  _FRONTEND_MEMORY: '1Gi'
  _FRONTEND_CPU: '1'
  _FRONTEND_MAX_INSTANCES: '50'

  # API URL (will be set after backend deployment)
  _API_BASE_URL: 'https://avestoai-backend-${_ENVIRONMENT}-PROJECT_ID.a.run.app'

# ============================================================================
# BUILD OPTIONS
# ============================================================================
options:
  # Use high-CPU machine for faster builds
  machineType: 'E2_HIGHCPU_8'

  # Enable Cloud Logging
  logging: 'CLOUD_LOGGING_ONLY'

  # Set build timeout
  timeout: '1800s'  # 30 minutes

  # Substitute environment variables in build
  substitution_option: 'ALLOW_LOOSE'

  # Enable dynamic substitutions
  dynamic_substitutions: true

# ============================================================================
# IMAGES TO STORE
# ============================================================================
images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/backend:${BUILD_ID}'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/backend:latest'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/frontend:${BUILD_ID}'
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/avestoai-repo/frontend:latest'
